@startuml

class "html.server" {
    + get(path: String, callback: Function)
    + post(path: String, callback: Function)
    + listen(port: Number, callback: Function)
}

class "database.database_connection" {
    + get_connection(new_config: Config): Connection
}

class "database.database_factory.PostgresConnectionFactory" {
    - config: Config
    + set_config(new_config: Config)
    + get_connection(): Connection
}

class "database.pg_config" {
    - DB_CONFIG: Config
}

class "rasa.run_rasa" {
    - robot_number: Integer
    - robots: Dictionary
    - command: String
    + is_process_running(process_name: String): Boolean
    + run_rasa()
}

class "robot.robot" {
    - robot_number: Integer
    + __init__(node_name: String, reference_frame: String)
    + set_parameters()
    + create_publisher(topic: String, msg_type: Type, pub_name: String)
    + create_subscriber(topic: String, msg_type: Type, callback: Function, sub_name: String)
    + scan_callback(msg: LaserScan)
    + action_callback(msg: String)
    + destination_callback(msg: String)
    + odom_callback(msg: Odometry)
}

class "robot.robot_database_interface" {
    - ROBOT_NUMBERS: Dictionary
    - DEFAULT: String
    + get_identification(): String
    + get_robot_number(): Integer
}

class "robot.robot_factory" {
    - identification_type: String
    + __init__(identification_type: String)
    + get_identification(): String
}

class "robot.rasa_ros_bridge" {
  - app: Flask
    - sender: String
    - rasa_endpoint: String
    - speech_subscribers: Dictionary
    - speech_pub: Publisher
    - move_base_pub: Publisher
    - action_pub: Publisher
    - destination_pub: Publisher
    - twist_pub: Publisher
    + subscribe_to_speech(voice: Voice)
}

html.server --> database.database_connection : passes data
database.database_factory.PostgresConnectionFactory --> database.database_connection : uses
database.database_factory.PostgresConnectionFactory --> database.pg_config : uses
robot.robot_database_interface --> database.database_connection : connects to
robot.robot_factory --> robot.robot_database_interface : uses
robot.robot --> robot.robot_factory : depends on
robot.rasa_ros_bridge --> robot.robot : depends on
rasa.run_rasa --> robot.rasa_ros_bridge : depends on

@enduml
